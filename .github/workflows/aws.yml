name: Deploy to Amazon ECS

on:
  push:
    branches: [ "ec2-deployment-test" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

# If execution says "Warning: Unexpected input(s)", it's due to the way Github parses "with" data, ignore it.
    - name: Set branch-based environment variables
      uses: iamtheyammer/branch-env-vars@v1.2.0
      with:
        STAGE_TAG: |
          main:wedontreallyusethemainbranch
          release/development:dev
          release/production:prod
          !default:defaultvalue

#     - name: Build, tag, and push image to Amazon ECR - WITHOUT CACHE
#       run: |
#         # Build a docker container and push it to ECR so that it can be deployed to ECS.
#         docker buildx build -t ${{ secrets.IMAGE_NAME }}:$STAGE_TAG --cache-to type=gha,scope=$GITHUB_REF_NAME-image --cache-from type=gha,scope=$GITHUB_REF_NAME-image .
#         docker push ${{ secrets.IMAGE_NAME }}:$STAGE_TAG
#         echo "image=${{ secrets.IMAGE_NAME }}:$STAGE_TAG" >> $GITHUB_OUTPUT

    - name: Setup environment variable workaround for "with"
      run: echo "DOCKER_IMAGE_TO_PUSH=${{ secrets.IMAGE_NAME_DOCKERHUB }}:$STAGE_TAG" >> $GITHUB_ENV

    - name: Download env from S3 bucket
      run: aws s3 cp s3://scio-project-envs/r/eia2030/_.Renviron .Renviron

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - uses: docker/setup-buildx-action@v2
    - uses: docker/build-push-action@v3
      name: Build with cache
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE_TO_PUSH }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    # - name: Adding Known Hosts
    #   run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -T 15 -H ${{ secrets.DEV_DEPLOYMENT_INSTANCE }} >> ~/.ssh/known_hosts

    # - name: Deploy with rsync
    #   run: rsync -avz -e 'ssh -p 1412' --progress ./docker-compose.dev.yml ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }}:/var/lib/eia2030/

    - name: SSH to EC2 and run container
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "docker pull ${{ env.DOCKER_IMAGE_TO_PUSH }}"
        ssh ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "sudo mkdir -p /var/lib/app/eia2030"
        ssh ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /var/lib/app/eia2030"
        scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no docker-compose.dev.yml ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }}:/var/lib/app/eia2030"
        ssh ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "docker-compose -f /var/lib/app/eia2030/docker-compose.dev.yml pull"
        ssh ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "docker-compose -f /var/lib/app/eia2030/docker-compose.dev.yml up -d"
      # ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} sudo mkdir -p /var/lib/app/eia2030"
      # ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /var/lib/app/eia2030"
      # ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} docker rm -f app" // stop container if already running under the defined container name
      # scp -P ${{ secrets.SSH_PORT }} docker-compose.dev.yml ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }}:/var/lib/app/eia2030"
      # ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} docker-compose -f /var/lib/app/eia2030/docker-compose.dev.yml pull"
      # ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USER }}@${{ secrets.DEV_DEPLOYMENT_INSTANCE }} docker-compose -f /var/lib/app/eia2030/docker-compose.dev.yml up -d"

    # - name: Download task definition
    #   run: aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }}$STAGE_TAG --query taskDefinition > task-definition.json
    
    # - name: Setup environment variable workaround for "with"
    #   run: echo "SERVICE_AND_CONTAINER_NAME_WORKAROUND=${{ secrets.ECS_SERVICE }}$STAGE_TAG" >> $GITHUB_ENV

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     container-name: ${{ env.SERVICE_AND_CONTAINER_NAME_WORKAROUND }}
    #     image: ${{ env.DOCKER_IMAGE_TO_PUSH }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: task-definition.json
    #     service: ${{ env.SERVICE_AND_CONTAINER_NAME_WORKAROUND }}
    #     cluster: ${{ secrets.ECS_CLUSTER }}
    #     wait-for-service-stability: true