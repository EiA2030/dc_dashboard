name: Deploy to Amazon ECS

on:
  push:
    branches: [ "release/development", "release/production" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

# If execution says "Warning: Unexpected input(s)", it's due to the way Github parses "with" data, ignore it.
    - name: Set branch-based environment variables
      uses: iamtheyammer/branch-env-vars@v1.2.0
      with:
        STAGE_TAG: |
          release/development:dev
          release/production:prod
          !default:defaulttag

    - name: Setup environment variable workaround for "with"
      run: echo "DOCKER_IMAGE_TO_PUSH=${{ secrets.IMAGE_NAME_DOCKERHUB }}:$STAGE_TAG" >> $GITHUB_ENV

    - name: Setup environment variable workaround for deployment instance
      run: if [ "$STAGE_TAG" = "dev" ];then echo "FINAL_DEPLOYMENT_INSTANCE=$STAGE_TAG.${{ secrets.DEPLOYMENT_INSTANCE }}" >> $GITHUB_ENV;else echo "FINAL_DEPLOYMENT_INSTANCE=${{ secrets.DEPLOYMENT_INSTANCE }}" >> $GITHUB_ENV;fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Download envs from S3 bucket
      run: |
        aws s3 cp s3://scio-project-envs/r/eia2030/_.Renviron .Renviron
        aws s3 cp s3://scio-project-envs/r/eia2030/_auth0.yml _auth0.yml

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - uses: docker/setup-buildx-action@v2
    - uses: docker/build-push-action@v3
      name: Build with cache
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_IMAGE_TO_PUSH }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    - name: SSH to EC2 and run container
      run: |
        ssh ${{ secrets.SSH_USER }}@${{ env.FINAL_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}"
        ssh ${{ secrets.SSH_USER }}@${{ env.FINAL_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "sudo mkdir -p /var/lib/app/eia2030"
        ssh ${{ secrets.SSH_USER }}@${{ env.FINAL_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} /var/lib/app/eia2030"
        ssh ${{ secrets.SSH_USER }}@${{ env.FINAL_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "docker rm -f app"
        scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no docker-compose.$STAGE_TAG.yml ${{ secrets.SSH_USER }}@${{ env.FINAL_DEPLOYMENT_INSTANCE }}:/var/lib/app/eia2030
        ssh ${{ secrets.SSH_USER }}@${{ env.FINAL_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "docker-compose -f /var/lib/app/eia2030/docker-compose.$STAGE_TAG.yml pull"
        ssh ${{ secrets.SSH_USER }}@${{ env.FINAL_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "docker-compose -f /var/lib/app/eia2030/docker-compose.$STAGE_TAG.yml up -d"
        ssh ${{ secrets.SSH_USER }}@${{ env.FINAL_DEPLOYMENT_INSTANCE }} -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT }} "docker image prune -f"
