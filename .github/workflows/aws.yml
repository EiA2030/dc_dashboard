name: Deploy to Amazon ECS

on:
  push:
    branches: [ "pipeline-test", "release/development", "release/production" ]

env:
  MY_SECRET: '${{ secrets.ECS_SERVICE }}'

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

# If execution says "Warning: Unexpected input(s)", it's due to the way Github parses "with" data, ignore it.
    - name: Set branch-based environment variables
      uses: iamtheyammer/branch-env-vars@v1.2.0
      with:
        STAGE_TAG: |
          main:wedontreallyusethemainbranch
          release/development:dev
          release/production:prod
          pipeline-test:dev
          !default:defaultvalue

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can be deployed to ECS.
        docker build -t ${{ secrets.IMAGE_NAME }}:$STAGE_TAG .
        docker push ${{ secrets.IMAGE_NAME }}:$STAGE_TAG
        echo "::set-output name=image::${{ secrets.IMAGE_NAME }}:$STAGE_TAG"
    
    - name: Download task definition
      run: aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION }}$STAGE_TAG --query taskDefinition > task-definition.json
    
    - name: Setup environment variable workaround for "with"
      run: echo "SERVICE_AND_CONTAINER_NAME_WORKAROUND=${{ secrets.ECS_SERVICE }}$STAGE_TAG" >> $GITHUB_ENV

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.SERVICE_AND_CONTAINER_NAME_WORKAROUND }}
#         container-name: eia2030-dc-dashboard-dev
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#       env:
#         ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      with:
        task-definition: task-definition.json
        service: ${{ env.SERVICE_AND_CONTAINER_NAME_WORKAROUND }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true
